/* eslint-disable */
// @generated by protobuf-ts 2.9.6 with parameter long_type_string,optimize_code_size,eslint_disable,ts_nocheck
// @generated from protobuf file "pistonpanel/logs.proto" (package "pistonpanel.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type {
  RpcOptions,
  RpcTransport,
  ServerStreamingCall,
  ServiceInfo,
  UnaryCall,
} from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type {
  LogRequest,
  LogResponse,
  PreviousLogRequest,
  PreviousLogResponse,
} from './logs';
import { LogsService } from './logs';

/**
 * @generated from protobuf service pistonpanel.v1.LogsService
 */
export interface ILogsServiceClient {
  /**
   * @generated from protobuf rpc: GetPrevious(pistonpanel.v1.PreviousLogRequest) returns (pistonpanel.v1.PreviousLogResponse);
   */
  getPrevious(
    input: PreviousLogRequest,
    options?: RpcOptions,
  ): UnaryCall<PreviousLogRequest, PreviousLogResponse>;

  /**
   * @generated from protobuf rpc: Subscribe(pistonpanel.v1.LogRequest) returns (stream pistonpanel.v1.LogResponse);
   */
  subscribe(
    input: LogRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<LogRequest, LogResponse>;
}

/**
 * @generated from protobuf service pistonpanel.v1.LogsService
 */
export class LogsServiceClient implements ILogsServiceClient, ServiceInfo {
  typeName = LogsService.typeName;
  methods = LogsService.methods;
  options = LogsService.options;

  constructor(private readonly _transport: RpcTransport) {}

  /**
   * @generated from protobuf rpc: GetPrevious(pistonpanel.v1.PreviousLogRequest) returns (pistonpanel.v1.PreviousLogResponse);
   */
  getPrevious(
    input: PreviousLogRequest,
    options?: RpcOptions,
  ): UnaryCall<PreviousLogRequest, PreviousLogResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<PreviousLogRequest, PreviousLogResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }

  /**
   * @generated from protobuf rpc: Subscribe(pistonpanel.v1.LogRequest) returns (stream pistonpanel.v1.LogResponse);
   */
  subscribe(
    input: LogRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<LogRequest, LogResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<LogRequest, LogResponse>(
      'serverStreaming',
      this._transport,
      method,
      opt,
      input,
    );
  }
}
