/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as AuthPathnameImport } from './routes/auth/$pathname'
import { Route as DashboardUserImport } from './routes/_dashboard/_user'
import { Route as DashboardUserIndexImport } from './routes/_dashboard/_user/index'
import { Route as DashboardOrgOrgImport } from './routes/_dashboard/org/$org'
import { Route as DashboardUserSettingsImport } from './routes/_dashboard/_user/settings'
import { Route as DashboardUserAdminImport } from './routes/_dashboard/_user/admin'
import { Route as DashboardOrgOrgIndexImport } from './routes/_dashboard/org/$org/index'
import { Route as DashboardUserAdminIndexImport } from './routes/_dashboard/_user/admin/index'
import { Route as DashboardOrgOrgMetaImport } from './routes/_dashboard/org/$org/meta'
import { Route as DashboardOrgOrgAuditLogImport } from './routes/_dashboard/org/$org/audit-log'
import { Route as DashboardUserAdminUsersImport } from './routes/_dashboard/_user/admin/users'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthPathnameRoute = AuthPathnameImport.update({
  id: '/auth/$pathname',
  path: '/auth/$pathname',
  getParentRoute: () => rootRoute,
} as any)

const DashboardUserRoute = DashboardUserImport.update({
  id: '/_user',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardUserIndexRoute = DashboardUserIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardUserRoute,
} as any)

const DashboardOrgOrgRoute = DashboardOrgOrgImport.update({
  id: '/org/$org',
  path: '/org/$org',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardUserSettingsRoute = DashboardUserSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardUserRoute,
} as any)

const DashboardUserAdminRoute = DashboardUserAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => DashboardUserRoute,
} as any)

const DashboardOrgOrgIndexRoute = DashboardOrgOrgIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardOrgOrgRoute,
} as any)

const DashboardUserAdminIndexRoute = DashboardUserAdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardUserAdminRoute,
} as any)

const DashboardOrgOrgMetaRoute = DashboardOrgOrgMetaImport.update({
  id: '/meta',
  path: '/meta',
  getParentRoute: () => DashboardOrgOrgRoute,
} as any)

const DashboardOrgOrgAuditLogRoute = DashboardOrgOrgAuditLogImport.update({
  id: '/audit-log',
  path: '/audit-log',
  getParentRoute: () => DashboardOrgOrgRoute,
} as any)

const DashboardUserAdminUsersRoute = DashboardUserAdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardUserAdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/_user': {
      id: '/_dashboard/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardUserImport
      parentRoute: typeof DashboardImport
    }
    '/auth/$pathname': {
      id: '/auth/$pathname'
      path: '/auth/$pathname'
      fullPath: '/auth/$pathname'
      preLoaderRoute: typeof AuthPathnameImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/_user/admin': {
      id: '/_dashboard/_user/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof DashboardUserAdminImport
      parentRoute: typeof DashboardUserImport
    }
    '/_dashboard/_user/settings': {
      id: '/_dashboard/_user/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof DashboardUserSettingsImport
      parentRoute: typeof DashboardUserImport
    }
    '/_dashboard/org/$org': {
      id: '/_dashboard/org/$org'
      path: '/org/$org'
      fullPath: '/org/$org'
      preLoaderRoute: typeof DashboardOrgOrgImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/_user/': {
      id: '/_dashboard/_user/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardUserIndexImport
      parentRoute: typeof DashboardUserImport
    }
    '/_dashboard/_user/admin/users': {
      id: '/_dashboard/_user/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof DashboardUserAdminUsersImport
      parentRoute: typeof DashboardUserAdminImport
    }
    '/_dashboard/org/$org/audit-log': {
      id: '/_dashboard/org/$org/audit-log'
      path: '/audit-log'
      fullPath: '/org/$org/audit-log'
      preLoaderRoute: typeof DashboardOrgOrgAuditLogImport
      parentRoute: typeof DashboardOrgOrgImport
    }
    '/_dashboard/org/$org/meta': {
      id: '/_dashboard/org/$org/meta'
      path: '/meta'
      fullPath: '/org/$org/meta'
      preLoaderRoute: typeof DashboardOrgOrgMetaImport
      parentRoute: typeof DashboardOrgOrgImport
    }
    '/_dashboard/_user/admin/': {
      id: '/_dashboard/_user/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof DashboardUserAdminIndexImport
      parentRoute: typeof DashboardUserAdminImport
    }
    '/_dashboard/org/$org/': {
      id: '/_dashboard/org/$org/'
      path: '/'
      fullPath: '/org/$org/'
      preLoaderRoute: typeof DashboardOrgOrgIndexImport
      parentRoute: typeof DashboardOrgOrgImport
    }
  }
}

// Create and export the route tree

interface DashboardUserAdminRouteChildren {
  DashboardUserAdminUsersRoute: typeof DashboardUserAdminUsersRoute
  DashboardUserAdminIndexRoute: typeof DashboardUserAdminIndexRoute
}

const DashboardUserAdminRouteChildren: DashboardUserAdminRouteChildren = {
  DashboardUserAdminUsersRoute: DashboardUserAdminUsersRoute,
  DashboardUserAdminIndexRoute: DashboardUserAdminIndexRoute,
}

const DashboardUserAdminRouteWithChildren =
  DashboardUserAdminRoute._addFileChildren(DashboardUserAdminRouteChildren)

interface DashboardUserRouteChildren {
  DashboardUserAdminRoute: typeof DashboardUserAdminRouteWithChildren
  DashboardUserSettingsRoute: typeof DashboardUserSettingsRoute
  DashboardUserIndexRoute: typeof DashboardUserIndexRoute
}

const DashboardUserRouteChildren: DashboardUserRouteChildren = {
  DashboardUserAdminRoute: DashboardUserAdminRouteWithChildren,
  DashboardUserSettingsRoute: DashboardUserSettingsRoute,
  DashboardUserIndexRoute: DashboardUserIndexRoute,
}

const DashboardUserRouteWithChildren = DashboardUserRoute._addFileChildren(
  DashboardUserRouteChildren,
)

interface DashboardOrgOrgRouteChildren {
  DashboardOrgOrgAuditLogRoute: typeof DashboardOrgOrgAuditLogRoute
  DashboardOrgOrgMetaRoute: typeof DashboardOrgOrgMetaRoute
  DashboardOrgOrgIndexRoute: typeof DashboardOrgOrgIndexRoute
}

const DashboardOrgOrgRouteChildren: DashboardOrgOrgRouteChildren = {
  DashboardOrgOrgAuditLogRoute: DashboardOrgOrgAuditLogRoute,
  DashboardOrgOrgMetaRoute: DashboardOrgOrgMetaRoute,
  DashboardOrgOrgIndexRoute: DashboardOrgOrgIndexRoute,
}

const DashboardOrgOrgRouteWithChildren = DashboardOrgOrgRoute._addFileChildren(
  DashboardOrgOrgRouteChildren,
)

interface DashboardRouteChildren {
  DashboardUserRoute: typeof DashboardUserRouteWithChildren
  DashboardOrgOrgRoute: typeof DashboardOrgOrgRouteWithChildren
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardUserRoute: DashboardUserRouteWithChildren,
  DashboardOrgOrgRoute: DashboardOrgOrgRouteWithChildren,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof DashboardUserRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/admin': typeof DashboardUserAdminRouteWithChildren
  '/settings': typeof DashboardUserSettingsRoute
  '/org/$org': typeof DashboardOrgOrgRouteWithChildren
  '/': typeof DashboardUserIndexRoute
  '/admin/users': typeof DashboardUserAdminUsersRoute
  '/org/$org/audit-log': typeof DashboardOrgOrgAuditLogRoute
  '/org/$org/meta': typeof DashboardOrgOrgMetaRoute
  '/admin/': typeof DashboardUserAdminIndexRoute
  '/org/$org/': typeof DashboardOrgOrgIndexRoute
}

export interface FileRoutesByTo {
  '': typeof DashboardRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/settings': typeof DashboardUserSettingsRoute
  '/': typeof DashboardUserIndexRoute
  '/admin/users': typeof DashboardUserAdminUsersRoute
  '/org/$org/audit-log': typeof DashboardOrgOrgAuditLogRoute
  '/org/$org/meta': typeof DashboardOrgOrgMetaRoute
  '/admin': typeof DashboardUserAdminIndexRoute
  '/org/$org': typeof DashboardOrgOrgIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_dashboard/_user': typeof DashboardUserRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/_dashboard/_user/admin': typeof DashboardUserAdminRouteWithChildren
  '/_dashboard/_user/settings': typeof DashboardUserSettingsRoute
  '/_dashboard/org/$org': typeof DashboardOrgOrgRouteWithChildren
  '/_dashboard/_user/': typeof DashboardUserIndexRoute
  '/_dashboard/_user/admin/users': typeof DashboardUserAdminUsersRoute
  '/_dashboard/org/$org/audit-log': typeof DashboardOrgOrgAuditLogRoute
  '/_dashboard/org/$org/meta': typeof DashboardOrgOrgMetaRoute
  '/_dashboard/_user/admin/': typeof DashboardUserAdminIndexRoute
  '/_dashboard/org/$org/': typeof DashboardOrgOrgIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/auth/$pathname'
    | '/admin'
    | '/settings'
    | '/org/$org'
    | '/'
    | '/admin/users'
    | '/org/$org/audit-log'
    | '/org/$org/meta'
    | '/admin/'
    | '/org/$org/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/auth/$pathname'
    | '/settings'
    | '/'
    | '/admin/users'
    | '/org/$org/audit-log'
    | '/org/$org/meta'
    | '/admin'
    | '/org/$org'
  id:
    | '__root__'
    | '/_dashboard'
    | '/_dashboard/_user'
    | '/auth/$pathname'
    | '/_dashboard/_user/admin'
    | '/_dashboard/_user/settings'
    | '/_dashboard/org/$org'
    | '/_dashboard/_user/'
    | '/_dashboard/_user/admin/users'
    | '/_dashboard/org/$org/audit-log'
    | '/_dashboard/org/$org/meta'
    | '/_dashboard/_user/admin/'
    | '/_dashboard/org/$org/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthPathnameRoute: typeof AuthPathnameRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
  AuthPathnameRoute: AuthPathnameRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard",
        "/auth/$pathname"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/_user",
        "/_dashboard/org/$org"
      ]
    },
    "/_dashboard/_user": {
      "filePath": "_dashboard/_user.tsx",
      "parent": "/_dashboard",
      "children": [
        "/_dashboard/_user/admin",
        "/_dashboard/_user/settings",
        "/_dashboard/_user/"
      ]
    },
    "/auth/$pathname": {
      "filePath": "auth/$pathname.tsx"
    },
    "/_dashboard/_user/admin": {
      "filePath": "_dashboard/_user/admin.tsx",
      "parent": "/_dashboard/_user",
      "children": [
        "/_dashboard/_user/admin/users",
        "/_dashboard/_user/admin/"
      ]
    },
    "/_dashboard/_user/settings": {
      "filePath": "_dashboard/_user/settings.tsx",
      "parent": "/_dashboard/_user"
    },
    "/_dashboard/org/$org": {
      "filePath": "_dashboard/org/$org.tsx",
      "parent": "/_dashboard",
      "children": [
        "/_dashboard/org/$org/audit-log",
        "/_dashboard/org/$org/meta",
        "/_dashboard/org/$org/"
      ]
    },
    "/_dashboard/_user/": {
      "filePath": "_dashboard/_user/index.tsx",
      "parent": "/_dashboard/_user"
    },
    "/_dashboard/_user/admin/users": {
      "filePath": "_dashboard/_user/admin/users.tsx",
      "parent": "/_dashboard/_user/admin"
    },
    "/_dashboard/org/$org/audit-log": {
      "filePath": "_dashboard/org/$org/audit-log.tsx",
      "parent": "/_dashboard/org/$org"
    },
    "/_dashboard/org/$org/meta": {
      "filePath": "_dashboard/org/$org/meta.tsx",
      "parent": "/_dashboard/org/$org"
    },
    "/_dashboard/_user/admin/": {
      "filePath": "_dashboard/_user/admin/index.tsx",
      "parent": "/_dashboard/_user/admin"
    },
    "/_dashboard/org/$org/": {
      "filePath": "_dashboard/org/$org/index.tsx",
      "parent": "/_dashboard/org/$org"
    }
  }
}
ROUTE_MANIFEST_END */
