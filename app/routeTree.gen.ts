/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as AuthPathnameRouteImport } from './routes/auth/$pathname'
import { Route as DashboardUserRouteImport } from './routes/_dashboard/_user'
import { Route as DashboardUserIndexRouteImport } from './routes/_dashboard/_user/index'
import { Route as DashboardOrgOrgRouteImport } from './routes/_dashboard/org/$org'
import { Route as DashboardUserSecurityRouteImport } from './routes/_dashboard/_user/security'
import { Route as DashboardUserApiKeysRouteImport } from './routes/_dashboard/_user/api-keys'
import { Route as DashboardUserAdminRouteImport } from './routes/_dashboard/_user/admin'
import { Route as DashboardUserAccountRouteImport } from './routes/_dashboard/_user/account'
import { Route as DashboardOrgOrgIndexRouteImport } from './routes/_dashboard/org/$org/index'
import { Route as DashboardUserAdminIndexRouteImport } from './routes/_dashboard/_user/admin/index'
import { Route as DashboardOrgOrgTeamsRouteImport } from './routes/_dashboard/org/$org/teams'
import { Route as DashboardOrgOrgSettingsRouteImport } from './routes/_dashboard/org/$org/settings'
import { Route as DashboardOrgOrgServersRouteImport } from './routes/_dashboard/org/$org/servers'
import { Route as DashboardOrgOrgNetworksRouteImport } from './routes/_dashboard/org/$org/networks'
import { Route as DashboardOrgOrgMembersRouteImport } from './routes/_dashboard/org/$org/members'
import { Route as DashboardOrgOrgDatabasesRouteImport } from './routes/_dashboard/org/$org/databases'
import { Route as DashboardOrgOrgAuditLogRouteImport } from './routes/_dashboard/org/$org/audit-log'
import { Route as DashboardOrgOrgAssistantRouteImport } from './routes/_dashboard/org/$org/assistant'
import { Route as DashboardUserAdminUsersRouteImport } from './routes/_dashboard/_user/admin/users'

const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthPathnameRoute = AuthPathnameRouteImport.update({
  id: '/auth/$pathname',
  path: '/auth/$pathname',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardUserRoute = DashboardUserRouteImport.update({
  id: '/_user',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardUserIndexRoute = DashboardUserIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardUserRoute,
} as any)
const DashboardOrgOrgRoute = DashboardOrgOrgRouteImport.update({
  id: '/org/$org',
  path: '/org/$org',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardUserSecurityRoute = DashboardUserSecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => DashboardUserRoute,
} as any)
const DashboardUserApiKeysRoute = DashboardUserApiKeysRouteImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => DashboardUserRoute,
} as any)
const DashboardUserAdminRoute = DashboardUserAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => DashboardUserRoute,
} as any)
const DashboardUserAccountRoute = DashboardUserAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => DashboardUserRoute,
} as any)
const DashboardOrgOrgIndexRoute = DashboardOrgOrgIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardOrgOrgRoute,
} as any)
const DashboardUserAdminIndexRoute = DashboardUserAdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardUserAdminRoute,
} as any)
const DashboardOrgOrgTeamsRoute = DashboardOrgOrgTeamsRouteImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => DashboardOrgOrgRoute,
} as any)
const DashboardOrgOrgSettingsRoute = DashboardOrgOrgSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardOrgOrgRoute,
} as any)
const DashboardOrgOrgServersRoute = DashboardOrgOrgServersRouteImport.update({
  id: '/servers',
  path: '/servers',
  getParentRoute: () => DashboardOrgOrgRoute,
} as any)
const DashboardOrgOrgNetworksRoute = DashboardOrgOrgNetworksRouteImport.update({
  id: '/networks',
  path: '/networks',
  getParentRoute: () => DashboardOrgOrgRoute,
} as any)
const DashboardOrgOrgMembersRoute = DashboardOrgOrgMembersRouteImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => DashboardOrgOrgRoute,
} as any)
const DashboardOrgOrgDatabasesRoute =
  DashboardOrgOrgDatabasesRouteImport.update({
    id: '/databases',
    path: '/databases',
    getParentRoute: () => DashboardOrgOrgRoute,
  } as any)
const DashboardOrgOrgAuditLogRoute = DashboardOrgOrgAuditLogRouteImport.update({
  id: '/audit-log',
  path: '/audit-log',
  getParentRoute: () => DashboardOrgOrgRoute,
} as any)
const DashboardOrgOrgAssistantRoute =
  DashboardOrgOrgAssistantRouteImport.update({
    id: '/assistant',
    path: '/assistant',
    getParentRoute: () => DashboardOrgOrgRoute,
  } as any)
const DashboardUserAdminUsersRoute = DashboardUserAdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardUserAdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '': typeof DashboardUserRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/account': typeof DashboardUserAccountRoute
  '/admin': typeof DashboardUserAdminRouteWithChildren
  '/api-keys': typeof DashboardUserApiKeysRoute
  '/security': typeof DashboardUserSecurityRoute
  '/org/$org': typeof DashboardOrgOrgRouteWithChildren
  '/': typeof DashboardUserIndexRoute
  '/admin/users': typeof DashboardUserAdminUsersRoute
  '/org/$org/assistant': typeof DashboardOrgOrgAssistantRoute
  '/org/$org/audit-log': typeof DashboardOrgOrgAuditLogRoute
  '/org/$org/databases': typeof DashboardOrgOrgDatabasesRoute
  '/org/$org/members': typeof DashboardOrgOrgMembersRoute
  '/org/$org/networks': typeof DashboardOrgOrgNetworksRoute
  '/org/$org/servers': typeof DashboardOrgOrgServersRoute
  '/org/$org/settings': typeof DashboardOrgOrgSettingsRoute
  '/org/$org/teams': typeof DashboardOrgOrgTeamsRoute
  '/admin/': typeof DashboardUserAdminIndexRoute
  '/org/$org/': typeof DashboardOrgOrgIndexRoute
}
export interface FileRoutesByTo {
  '': typeof DashboardRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/account': typeof DashboardUserAccountRoute
  '/api-keys': typeof DashboardUserApiKeysRoute
  '/security': typeof DashboardUserSecurityRoute
  '/': typeof DashboardUserIndexRoute
  '/admin/users': typeof DashboardUserAdminUsersRoute
  '/org/$org/assistant': typeof DashboardOrgOrgAssistantRoute
  '/org/$org/audit-log': typeof DashboardOrgOrgAuditLogRoute
  '/org/$org/databases': typeof DashboardOrgOrgDatabasesRoute
  '/org/$org/members': typeof DashboardOrgOrgMembersRoute
  '/org/$org/networks': typeof DashboardOrgOrgNetworksRoute
  '/org/$org/servers': typeof DashboardOrgOrgServersRoute
  '/org/$org/settings': typeof DashboardOrgOrgSettingsRoute
  '/org/$org/teams': typeof DashboardOrgOrgTeamsRoute
  '/admin': typeof DashboardUserAdminIndexRoute
  '/org/$org': typeof DashboardOrgOrgIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_dashboard/_user': typeof DashboardUserRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/_dashboard/_user/account': typeof DashboardUserAccountRoute
  '/_dashboard/_user/admin': typeof DashboardUserAdminRouteWithChildren
  '/_dashboard/_user/api-keys': typeof DashboardUserApiKeysRoute
  '/_dashboard/_user/security': typeof DashboardUserSecurityRoute
  '/_dashboard/org/$org': typeof DashboardOrgOrgRouteWithChildren
  '/_dashboard/_user/': typeof DashboardUserIndexRoute
  '/_dashboard/_user/admin/users': typeof DashboardUserAdminUsersRoute
  '/_dashboard/org/$org/assistant': typeof DashboardOrgOrgAssistantRoute
  '/_dashboard/org/$org/audit-log': typeof DashboardOrgOrgAuditLogRoute
  '/_dashboard/org/$org/databases': typeof DashboardOrgOrgDatabasesRoute
  '/_dashboard/org/$org/members': typeof DashboardOrgOrgMembersRoute
  '/_dashboard/org/$org/networks': typeof DashboardOrgOrgNetworksRoute
  '/_dashboard/org/$org/servers': typeof DashboardOrgOrgServersRoute
  '/_dashboard/org/$org/settings': typeof DashboardOrgOrgSettingsRoute
  '/_dashboard/org/$org/teams': typeof DashboardOrgOrgTeamsRoute
  '/_dashboard/_user/admin/': typeof DashboardUserAdminIndexRoute
  '/_dashboard/org/$org/': typeof DashboardOrgOrgIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/auth/$pathname'
    | '/account'
    | '/admin'
    | '/api-keys'
    | '/security'
    | '/org/$org'
    | '/'
    | '/admin/users'
    | '/org/$org/assistant'
    | '/org/$org/audit-log'
    | '/org/$org/databases'
    | '/org/$org/members'
    | '/org/$org/networks'
    | '/org/$org/servers'
    | '/org/$org/settings'
    | '/org/$org/teams'
    | '/admin/'
    | '/org/$org/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/auth/$pathname'
    | '/account'
    | '/api-keys'
    | '/security'
    | '/'
    | '/admin/users'
    | '/org/$org/assistant'
    | '/org/$org/audit-log'
    | '/org/$org/databases'
    | '/org/$org/members'
    | '/org/$org/networks'
    | '/org/$org/servers'
    | '/org/$org/settings'
    | '/org/$org/teams'
    | '/admin'
    | '/org/$org'
  id:
    | '__root__'
    | '/_dashboard'
    | '/_dashboard/_user'
    | '/auth/$pathname'
    | '/_dashboard/_user/account'
    | '/_dashboard/_user/admin'
    | '/_dashboard/_user/api-keys'
    | '/_dashboard/_user/security'
    | '/_dashboard/org/$org'
    | '/_dashboard/_user/'
    | '/_dashboard/_user/admin/users'
    | '/_dashboard/org/$org/assistant'
    | '/_dashboard/org/$org/audit-log'
    | '/_dashboard/org/$org/databases'
    | '/_dashboard/org/$org/members'
    | '/_dashboard/org/$org/networks'
    | '/_dashboard/org/$org/servers'
    | '/_dashboard/org/$org/settings'
    | '/_dashboard/org/$org/teams'
    | '/_dashboard/_user/admin/'
    | '/_dashboard/org/$org/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthPathnameRoute: typeof AuthPathnameRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/_user': {
      id: '/_dashboard/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardUserRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/auth/$pathname': {
      id: '/auth/$pathname'
      path: '/auth/$pathname'
      fullPath: '/auth/$pathname'
      preLoaderRoute: typeof AuthPathnameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/_user/account': {
      id: '/_dashboard/_user/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof DashboardUserAccountRouteImport
      parentRoute: typeof DashboardUserRoute
    }
    '/_dashboard/_user/admin': {
      id: '/_dashboard/_user/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof DashboardUserAdminRouteImport
      parentRoute: typeof DashboardUserRoute
    }
    '/_dashboard/_user/api-keys': {
      id: '/_dashboard/_user/api-keys'
      path: '/api-keys'
      fullPath: '/api-keys'
      preLoaderRoute: typeof DashboardUserApiKeysRouteImport
      parentRoute: typeof DashboardUserRoute
    }
    '/_dashboard/_user/security': {
      id: '/_dashboard/_user/security'
      path: '/security'
      fullPath: '/security'
      preLoaderRoute: typeof DashboardUserSecurityRouteImport
      parentRoute: typeof DashboardUserRoute
    }
    '/_dashboard/org/$org': {
      id: '/_dashboard/org/$org'
      path: '/org/$org'
      fullPath: '/org/$org'
      preLoaderRoute: typeof DashboardOrgOrgRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/_user/': {
      id: '/_dashboard/_user/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardUserIndexRouteImport
      parentRoute: typeof DashboardUserRoute
    }
    '/_dashboard/_user/admin/users': {
      id: '/_dashboard/_user/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof DashboardUserAdminUsersRouteImport
      parentRoute: typeof DashboardUserAdminRoute
    }
    '/_dashboard/org/$org/assistant': {
      id: '/_dashboard/org/$org/assistant'
      path: '/assistant'
      fullPath: '/org/$org/assistant'
      preLoaderRoute: typeof DashboardOrgOrgAssistantRouteImport
      parentRoute: typeof DashboardOrgOrgRoute
    }
    '/_dashboard/org/$org/audit-log': {
      id: '/_dashboard/org/$org/audit-log'
      path: '/audit-log'
      fullPath: '/org/$org/audit-log'
      preLoaderRoute: typeof DashboardOrgOrgAuditLogRouteImport
      parentRoute: typeof DashboardOrgOrgRoute
    }
    '/_dashboard/org/$org/databases': {
      id: '/_dashboard/org/$org/databases'
      path: '/databases'
      fullPath: '/org/$org/databases'
      preLoaderRoute: typeof DashboardOrgOrgDatabasesRouteImport
      parentRoute: typeof DashboardOrgOrgRoute
    }
    '/_dashboard/org/$org/members': {
      id: '/_dashboard/org/$org/members'
      path: '/members'
      fullPath: '/org/$org/members'
      preLoaderRoute: typeof DashboardOrgOrgMembersRouteImport
      parentRoute: typeof DashboardOrgOrgRoute
    }
    '/_dashboard/org/$org/networks': {
      id: '/_dashboard/org/$org/networks'
      path: '/networks'
      fullPath: '/org/$org/networks'
      preLoaderRoute: typeof DashboardOrgOrgNetworksRouteImport
      parentRoute: typeof DashboardOrgOrgRoute
    }
    '/_dashboard/org/$org/servers': {
      id: '/_dashboard/org/$org/servers'
      path: '/servers'
      fullPath: '/org/$org/servers'
      preLoaderRoute: typeof DashboardOrgOrgServersRouteImport
      parentRoute: typeof DashboardOrgOrgRoute
    }
    '/_dashboard/org/$org/settings': {
      id: '/_dashboard/org/$org/settings'
      path: '/settings'
      fullPath: '/org/$org/settings'
      preLoaderRoute: typeof DashboardOrgOrgSettingsRouteImport
      parentRoute: typeof DashboardOrgOrgRoute
    }
    '/_dashboard/org/$org/teams': {
      id: '/_dashboard/org/$org/teams'
      path: '/teams'
      fullPath: '/org/$org/teams'
      preLoaderRoute: typeof DashboardOrgOrgTeamsRouteImport
      parentRoute: typeof DashboardOrgOrgRoute
    }
    '/_dashboard/_user/admin/': {
      id: '/_dashboard/_user/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof DashboardUserAdminIndexRouteImport
      parentRoute: typeof DashboardUserAdminRoute
    }
    '/_dashboard/org/$org/': {
      id: '/_dashboard/org/$org/'
      path: '/'
      fullPath: '/org/$org/'
      preLoaderRoute: typeof DashboardOrgOrgIndexRouteImport
      parentRoute: typeof DashboardOrgOrgRoute
    }
  }
}

interface DashboardUserAdminRouteChildren {
  DashboardUserAdminUsersRoute: typeof DashboardUserAdminUsersRoute
  DashboardUserAdminIndexRoute: typeof DashboardUserAdminIndexRoute
}

const DashboardUserAdminRouteChildren: DashboardUserAdminRouteChildren = {
  DashboardUserAdminUsersRoute: DashboardUserAdminUsersRoute,
  DashboardUserAdminIndexRoute: DashboardUserAdminIndexRoute,
}

const DashboardUserAdminRouteWithChildren =
  DashboardUserAdminRoute._addFileChildren(DashboardUserAdminRouteChildren)

interface DashboardUserRouteChildren {
  DashboardUserAccountRoute: typeof DashboardUserAccountRoute
  DashboardUserAdminRoute: typeof DashboardUserAdminRouteWithChildren
  DashboardUserApiKeysRoute: typeof DashboardUserApiKeysRoute
  DashboardUserSecurityRoute: typeof DashboardUserSecurityRoute
  DashboardUserIndexRoute: typeof DashboardUserIndexRoute
}

const DashboardUserRouteChildren: DashboardUserRouteChildren = {
  DashboardUserAccountRoute: DashboardUserAccountRoute,
  DashboardUserAdminRoute: DashboardUserAdminRouteWithChildren,
  DashboardUserApiKeysRoute: DashboardUserApiKeysRoute,
  DashboardUserSecurityRoute: DashboardUserSecurityRoute,
  DashboardUserIndexRoute: DashboardUserIndexRoute,
}

const DashboardUserRouteWithChildren = DashboardUserRoute._addFileChildren(
  DashboardUserRouteChildren,
)

interface DashboardOrgOrgRouteChildren {
  DashboardOrgOrgAssistantRoute: typeof DashboardOrgOrgAssistantRoute
  DashboardOrgOrgAuditLogRoute: typeof DashboardOrgOrgAuditLogRoute
  DashboardOrgOrgDatabasesRoute: typeof DashboardOrgOrgDatabasesRoute
  DashboardOrgOrgMembersRoute: typeof DashboardOrgOrgMembersRoute
  DashboardOrgOrgNetworksRoute: typeof DashboardOrgOrgNetworksRoute
  DashboardOrgOrgServersRoute: typeof DashboardOrgOrgServersRoute
  DashboardOrgOrgSettingsRoute: typeof DashboardOrgOrgSettingsRoute
  DashboardOrgOrgTeamsRoute: typeof DashboardOrgOrgTeamsRoute
  DashboardOrgOrgIndexRoute: typeof DashboardOrgOrgIndexRoute
}

const DashboardOrgOrgRouteChildren: DashboardOrgOrgRouteChildren = {
  DashboardOrgOrgAssistantRoute: DashboardOrgOrgAssistantRoute,
  DashboardOrgOrgAuditLogRoute: DashboardOrgOrgAuditLogRoute,
  DashboardOrgOrgDatabasesRoute: DashboardOrgOrgDatabasesRoute,
  DashboardOrgOrgMembersRoute: DashboardOrgOrgMembersRoute,
  DashboardOrgOrgNetworksRoute: DashboardOrgOrgNetworksRoute,
  DashboardOrgOrgServersRoute: DashboardOrgOrgServersRoute,
  DashboardOrgOrgSettingsRoute: DashboardOrgOrgSettingsRoute,
  DashboardOrgOrgTeamsRoute: DashboardOrgOrgTeamsRoute,
  DashboardOrgOrgIndexRoute: DashboardOrgOrgIndexRoute,
}

const DashboardOrgOrgRouteWithChildren = DashboardOrgOrgRoute._addFileChildren(
  DashboardOrgOrgRouteChildren,
)

interface DashboardRouteChildren {
  DashboardUserRoute: typeof DashboardUserRouteWithChildren
  DashboardOrgOrgRoute: typeof DashboardOrgOrgRouteWithChildren
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardUserRoute: DashboardUserRouteWithChildren,
  DashboardOrgOrgRoute: DashboardOrgOrgRouteWithChildren,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
  AuthPathnameRoute: AuthPathnameRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
