// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "com/soulfiremc/grpc/generated/proxy-check.proto" (package "com.soulfiremc.grpc.generated", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ProxyProto } from "./common";
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ProxyCheckRequest
 */
export interface ProxyCheckRequest {
    /**
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.ProxyProto proxy = 1;
     */
    proxy: ProxyProto[];
    /**
     * @generated from protobuf field: com.soulfiremc.grpc.generated.ProxyCheckRequest.Target target = 2;
     */
    target: ProxyCheckRequest_Target;
}
/**
 * @generated from protobuf enum com.soulfiremc.grpc.generated.ProxyCheckRequest.Target
 */
export enum ProxyCheckRequest_Target {
    /**
     * @generated from protobuf enum value: IPIFY = 0;
     */
    IPIFY = 0,
    /**
     * @generated from protobuf enum value: AWS = 1;
     */
    AWS = 1
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ProxyCheckResponseSingle
 */
export interface ProxyCheckResponseSingle {
    /**
     * @generated from protobuf field: com.soulfiremc.grpc.generated.ProxyProto proxy = 1;
     */
    proxy?: ProxyProto;
    /**
     * @generated from protobuf field: bool valid = 2;
     */
    valid: boolean;
    /**
     * @generated from protobuf field: int32 latency = 3;
     */
    latency: number;
    /**
     * @generated from protobuf field: string realIp = 4;
     */
    realIp: string;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ProxyCheckResponse
 */
export interface ProxyCheckResponse {
    /**
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.ProxyCheckResponseSingle response = 1;
     */
    response: ProxyCheckResponseSingle[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ProxyCheckRequest$Type extends MessageType<ProxyCheckRequest> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ProxyCheckRequest", [
            { no: 1, name: "proxy", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProxyProto },
            { no: 2, name: "target", kind: "enum", T: () => ["com.soulfiremc.grpc.generated.ProxyCheckRequest.Target", ProxyCheckRequest_Target] }
        ]);
    }
    create(value?: PartialMessage<ProxyCheckRequest>): ProxyCheckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.proxy = [];
        message.target = 0;
        if (value !== undefined)
            reflectionMergePartial<ProxyCheckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProxyCheckRequest): ProxyCheckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.soulfiremc.grpc.generated.ProxyProto proxy */ 1:
                    message.proxy.push(ProxyProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* com.soulfiremc.grpc.generated.ProxyCheckRequest.Target target */ 2:
                    message.target = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProxyCheckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.soulfiremc.grpc.generated.ProxyProto proxy = 1; */
        for (let i = 0; i < message.proxy.length; i++)
            ProxyProto.internalBinaryWrite(message.proxy[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.soulfiremc.grpc.generated.ProxyCheckRequest.Target target = 2; */
        if (message.target !== 0)
            writer.tag(2, WireType.Varint).int32(message.target);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ProxyCheckRequest
 */
export const ProxyCheckRequest = new ProxyCheckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProxyCheckResponseSingle$Type extends MessageType<ProxyCheckResponseSingle> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ProxyCheckResponseSingle", [
            { no: 1, name: "proxy", kind: "message", T: () => ProxyProto },
            { no: 2, name: "valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "latency", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "realIp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProxyCheckResponseSingle>): ProxyCheckResponseSingle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.valid = false;
        message.latency = 0;
        message.realIp = "";
        if (value !== undefined)
            reflectionMergePartial<ProxyCheckResponseSingle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProxyCheckResponseSingle): ProxyCheckResponseSingle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.soulfiremc.grpc.generated.ProxyProto proxy */ 1:
                    message.proxy = ProxyProto.internalBinaryRead(reader, reader.uint32(), options, message.proxy);
                    break;
                case /* bool valid */ 2:
                    message.valid = reader.bool();
                    break;
                case /* int32 latency */ 3:
                    message.latency = reader.int32();
                    break;
                case /* string realIp */ 4:
                    message.realIp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProxyCheckResponseSingle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.soulfiremc.grpc.generated.ProxyProto proxy = 1; */
        if (message.proxy)
            ProxyProto.internalBinaryWrite(message.proxy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool valid = 2; */
        if (message.valid !== false)
            writer.tag(2, WireType.Varint).bool(message.valid);
        /* int32 latency = 3; */
        if (message.latency !== 0)
            writer.tag(3, WireType.Varint).int32(message.latency);
        /* string realIp = 4; */
        if (message.realIp !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.realIp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ProxyCheckResponseSingle
 */
export const ProxyCheckResponseSingle = new ProxyCheckResponseSingle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProxyCheckResponse$Type extends MessageType<ProxyCheckResponse> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ProxyCheckResponse", [
            { no: 1, name: "response", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProxyCheckResponseSingle }
        ]);
    }
    create(value?: PartialMessage<ProxyCheckResponse>): ProxyCheckResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = [];
        if (value !== undefined)
            reflectionMergePartial<ProxyCheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProxyCheckResponse): ProxyCheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.soulfiremc.grpc.generated.ProxyCheckResponseSingle response */ 1:
                    message.response.push(ProxyCheckResponseSingle.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProxyCheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.soulfiremc.grpc.generated.ProxyCheckResponseSingle response = 1; */
        for (let i = 0; i < message.response.length; i++)
            ProxyCheckResponseSingle.internalBinaryWrite(message.response[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ProxyCheckResponse
 */
export const ProxyCheckResponse = new ProxyCheckResponse$Type();
/**
 * @generated ServiceType for protobuf service com.soulfiremc.grpc.generated.ProxyCheckService
 */
export const ProxyCheckService = new ServiceType("com.soulfiremc.grpc.generated.ProxyCheckService", [
    { name: "check", options: {}, I: ProxyCheckRequest, O: ProxyCheckResponse }
]);
