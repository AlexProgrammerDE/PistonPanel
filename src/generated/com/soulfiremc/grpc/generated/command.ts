// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "com/soulfiremc/grpc/generated/command.proto" (package "com.soulfiremc.grpc.generated", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.CommandRequest
 */
export interface CommandRequest {
    /**
     * @generated from protobuf field: string command = 1;
     */
    command: string;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.CommandResponse
 */
export interface CommandResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.CommandCompletionRequest
 */
export interface CommandCompletionRequest {
    /**
     * @generated from protobuf field: string command = 1;
     */
    command: string;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.CommandHistoryRequest
 */
export interface CommandHistoryRequest {
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.CommandCompletionResponse
 */
export interface CommandCompletionResponse {
    /**
     * @generated from protobuf field: repeated string suggestions = 1;
     */
    suggestions: string[];
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.CommandHistoryEntry
 */
export interface CommandHistoryEntry {
    /**
     * @generated from protobuf field: int64 timestamp = 1;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: string command = 2;
     */
    command: string;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.CommandHistoryResponse
 */
export interface CommandHistoryResponse {
    /**
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.CommandHistoryEntry entries = 1;
     */
    entries: CommandHistoryEntry[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CommandRequest$Type extends MessageType<CommandRequest> {
    constructor() {
        super("com.soulfiremc.grpc.generated.CommandRequest", [
            { no: 1, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommandRequest>): CommandRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.command = "";
        if (value !== undefined)
            reflectionMergePartial<CommandRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandRequest): CommandRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string command */ 1:
                    message.command = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string command = 1; */
        if (message.command !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.command);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.CommandRequest
 */
export const CommandRequest = new CommandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandResponse$Type extends MessageType<CommandResponse> {
    constructor() {
        super("com.soulfiremc.grpc.generated.CommandResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CommandResponse>): CommandResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        if (value !== undefined)
            reflectionMergePartial<CommandResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandResponse): CommandResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.CommandResponse
 */
export const CommandResponse = new CommandResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandCompletionRequest$Type extends MessageType<CommandCompletionRequest> {
    constructor() {
        super("com.soulfiremc.grpc.generated.CommandCompletionRequest", [
            { no: 1, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommandCompletionRequest>): CommandCompletionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.command = "";
        if (value !== undefined)
            reflectionMergePartial<CommandCompletionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandCompletionRequest): CommandCompletionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string command */ 1:
                    message.command = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandCompletionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string command = 1; */
        if (message.command !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.command);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.CommandCompletionRequest
 */
export const CommandCompletionRequest = new CommandCompletionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandHistoryRequest$Type extends MessageType<CommandHistoryRequest> {
    constructor() {
        super("com.soulfiremc.grpc.generated.CommandHistoryRequest", []);
    }
    create(value?: PartialMessage<CommandHistoryRequest>): CommandHistoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CommandHistoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandHistoryRequest): CommandHistoryRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CommandHistoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.CommandHistoryRequest
 */
export const CommandHistoryRequest = new CommandHistoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandCompletionResponse$Type extends MessageType<CommandCompletionResponse> {
    constructor() {
        super("com.soulfiremc.grpc.generated.CommandCompletionResponse", [
            { no: 1, name: "suggestions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommandCompletionResponse>): CommandCompletionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.suggestions = [];
        if (value !== undefined)
            reflectionMergePartial<CommandCompletionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandCompletionResponse): CommandCompletionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string suggestions */ 1:
                    message.suggestions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandCompletionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string suggestions = 1; */
        for (let i = 0; i < message.suggestions.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.suggestions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.CommandCompletionResponse
 */
export const CommandCompletionResponse = new CommandCompletionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandHistoryEntry$Type extends MessageType<CommandHistoryEntry> {
    constructor() {
        super("com.soulfiremc.grpc.generated.CommandHistoryEntry", [
            { no: 1, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommandHistoryEntry>): CommandHistoryEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timestamp = 0n;
        message.command = "";
        if (value !== undefined)
            reflectionMergePartial<CommandHistoryEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandHistoryEntry): CommandHistoryEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timestamp */ 1:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* string command */ 2:
                    message.command = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandHistoryEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timestamp);
        /* string command = 2; */
        if (message.command !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.command);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.CommandHistoryEntry
 */
export const CommandHistoryEntry = new CommandHistoryEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandHistoryResponse$Type extends MessageType<CommandHistoryResponse> {
    constructor() {
        super("com.soulfiremc.grpc.generated.CommandHistoryResponse", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommandHistoryEntry }
        ]);
    }
    create(value?: PartialMessage<CommandHistoryResponse>): CommandHistoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial<CommandHistoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandHistoryResponse): CommandHistoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.soulfiremc.grpc.generated.CommandHistoryEntry entries */ 1:
                    message.entries.push(CommandHistoryEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandHistoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.soulfiremc.grpc.generated.CommandHistoryEntry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            CommandHistoryEntry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.CommandHistoryResponse
 */
export const CommandHistoryResponse = new CommandHistoryResponse$Type();
/**
 * @generated ServiceType for protobuf service com.soulfiremc.grpc.generated.CommandService
 */
export const CommandService = new ServiceType("com.soulfiremc.grpc.generated.CommandService", [
    { name: "executeCommand", options: {}, I: CommandRequest, O: CommandResponse },
    { name: "tabCompleteCommand", options: {}, I: CommandCompletionRequest, O: CommandCompletionResponse },
    { name: "getCommandHistory", options: {}, I: CommandHistoryRequest, O: CommandHistoryResponse }
]);
