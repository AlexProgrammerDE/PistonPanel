// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "com/soulfiremc/grpc/generated/mc-auth.proto" (package "com.soulfiremc.grpc.generated", syntax proto3)
// tslint:disable
import type {RpcOptions, RpcTransport, ServiceInfo, UnaryCall} from "@protobuf-ts/runtime-rpc";
import {stackIntercept} from "@protobuf-ts/runtime-rpc";
import type {AuthRequest, AuthResponse, RefreshRequest, RefreshResponse} from "./mc-auth";
import {MCAuthService} from "./mc-auth";

/**
 * @generated from protobuf service com.soulfiremc.grpc.generated.MCAuthService
 */
export interface IMCAuthServiceClient {
  /**
   * @generated from protobuf rpc: login(com.soulfiremc.grpc.generated.AuthRequest) returns (com.soulfiremc.grpc.generated.AuthResponse);
   */
  login(input: AuthRequest, options?: RpcOptions): UnaryCall<AuthRequest, AuthResponse>;

  /**
   * @generated from protobuf rpc: refresh(com.soulfiremc.grpc.generated.RefreshRequest) returns (com.soulfiremc.grpc.generated.RefreshResponse);
   */
  refresh(input: RefreshRequest, options?: RpcOptions): UnaryCall<RefreshRequest, RefreshResponse>;
}

/**
 * @generated from protobuf service com.soulfiremc.grpc.generated.MCAuthService
 */
export class MCAuthServiceClient implements IMCAuthServiceClient, ServiceInfo {
  typeName = MCAuthService.typeName;
  methods = MCAuthService.methods;
  options = MCAuthService.options;

  constructor(private readonly _transport: RpcTransport) {
  }

  /**
   * @generated from protobuf rpc: login(com.soulfiremc.grpc.generated.AuthRequest) returns (com.soulfiremc.grpc.generated.AuthResponse);
   */
  login(input: AuthRequest, options?: RpcOptions): UnaryCall<AuthRequest, AuthResponse> {
    const method = this.methods[0], opt = this._transport.mergeOptions(options);
    return stackIntercept<AuthRequest, AuthResponse>("unary", this._transport, method, opt, input);
  }

  /**
   * @generated from protobuf rpc: refresh(com.soulfiremc.grpc.generated.RefreshRequest) returns (com.soulfiremc.grpc.generated.RefreshResponse);
   */
  refresh(input: RefreshRequest, options?: RpcOptions): UnaryCall<RefreshRequest, RefreshResponse> {
    const method = this.methods[1], opt = this._transport.mergeOptions(options);
    return stackIntercept<RefreshRequest, RefreshResponse>("unary", this._transport, method, opt, input);
  }
}
