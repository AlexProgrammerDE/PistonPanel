// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "com/soulfiremc/grpc/generated/attack.proto" (package "com.soulfiremc.grpc.generated", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ProxyProto } from "./common";
import { MinecraftAccountProto } from "./common";
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.SettingsEntry
 */
export interface SettingsEntry {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "stringValue";
        /**
         * @generated from protobuf field: string stringValue = 2;
         */
        stringValue: string;
    } | {
        oneofKind: "intValue";
        /**
         * @generated from protobuf field: int32 intValue = 3;
         */
        intValue: number;
    } | {
        oneofKind: "boolValue";
        /**
         * @generated from protobuf field: bool boolValue = 4;
         */
        boolValue: boolean;
    } | {
        oneofKind: "doubleValue";
        /**
         * @generated from protobuf field: double doubleValue = 5;
         */
        doubleValue: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.SettingsNamespace
 */
export interface SettingsNamespace {
    /**
     * @generated from protobuf field: string namespace = 1;
     */
    namespace: string;
    /**
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.SettingsEntry entries = 2;
     */
    entries: SettingsEntry[];
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.AttackStartRequest
 */
export interface AttackStartRequest {
    /**
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.SettingsNamespace settings = 1;
     */
    settings: SettingsNamespace[];
    /**
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.MinecraftAccountProto accounts = 2;
     */
    accounts: MinecraftAccountProto[];
    /**
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.ProxyProto proxies = 3;
     */
    proxies: ProxyProto[];
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.AttackStartResponse
 */
export interface AttackStartResponse {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.AttackStateToggleRequest
 */
export interface AttackStateToggleRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: com.soulfiremc.grpc.generated.AttackStateToggleRequest.State newState = 2;
     */
    newState: AttackStateToggleRequest_State;
}
/**
 * @generated from protobuf enum com.soulfiremc.grpc.generated.AttackStateToggleRequest.State
 */
export enum AttackStateToggleRequest_State {
    /**
     * @generated from protobuf enum value: PAUSE = 0;
     */
    PAUSE = 0,
    /**
     * @generated from protobuf enum value: RESUME = 1;
     */
    RESUME = 1
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.AttackStateToggleResponse
 */
export interface AttackStateToggleResponse {
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.AttackStopRequest
 */
export interface AttackStopRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.AttackStopResponse
 */
export interface AttackStopResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class SettingsEntry$Type extends MessageType<SettingsEntry> {
    constructor() {
        super("com.soulfiremc.grpc.generated.SettingsEntry", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stringValue", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "intValue", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "boolValue", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "doubleValue", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<SettingsEntry>): SettingsEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SettingsEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsEntry): SettingsEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string stringValue */ 2:
                    message.value = {
                        oneofKind: "stringValue",
                        stringValue: reader.string()
                    };
                    break;
                case /* int32 intValue */ 3:
                    message.value = {
                        oneofKind: "intValue",
                        intValue: reader.int32()
                    };
                    break;
                case /* bool boolValue */ 4:
                    message.value = {
                        oneofKind: "boolValue",
                        boolValue: reader.bool()
                    };
                    break;
                case /* double doubleValue */ 5:
                    message.value = {
                        oneofKind: "doubleValue",
                        doubleValue: reader.double()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string stringValue = 2; */
        if (message.value.oneofKind === "stringValue")
            writer.tag(2, WireType.LengthDelimited).string(message.value.stringValue);
        /* int32 intValue = 3; */
        if (message.value.oneofKind === "intValue")
            writer.tag(3, WireType.Varint).int32(message.value.intValue);
        /* bool boolValue = 4; */
        if (message.value.oneofKind === "boolValue")
            writer.tag(4, WireType.Varint).bool(message.value.boolValue);
        /* double doubleValue = 5; */
        if (message.value.oneofKind === "doubleValue")
            writer.tag(5, WireType.Bit64).double(message.value.doubleValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.SettingsEntry
 */
export const SettingsEntry = new SettingsEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettingsNamespace$Type extends MessageType<SettingsNamespace> {
    constructor() {
        super("com.soulfiremc.grpc.generated.SettingsNamespace", [
            { no: 1, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettingsEntry }
        ]);
    }
    create(value?: PartialMessage<SettingsNamespace>): SettingsNamespace {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.namespace = "";
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial<SettingsNamespace>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SettingsNamespace): SettingsNamespace {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string namespace */ 1:
                    message.namespace = reader.string();
                    break;
                case /* repeated com.soulfiremc.grpc.generated.SettingsEntry entries */ 2:
                    message.entries.push(SettingsEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SettingsNamespace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string namespace = 1; */
        if (message.namespace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.namespace);
        /* repeated com.soulfiremc.grpc.generated.SettingsEntry entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            SettingsEntry.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.SettingsNamespace
 */
export const SettingsNamespace = new SettingsNamespace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttackStartRequest$Type extends MessageType<AttackStartRequest> {
    constructor() {
        super("com.soulfiremc.grpc.generated.AttackStartRequest", [
            { no: 1, name: "settings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SettingsNamespace },
            { no: 2, name: "accounts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MinecraftAccountProto },
            { no: 3, name: "proxies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProxyProto }
        ]);
    }
    create(value?: PartialMessage<AttackStartRequest>): AttackStartRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.settings = [];
        message.accounts = [];
        message.proxies = [];
        if (value !== undefined)
            reflectionMergePartial<AttackStartRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttackStartRequest): AttackStartRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.soulfiremc.grpc.generated.SettingsNamespace settings */ 1:
                    message.settings.push(SettingsNamespace.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.soulfiremc.grpc.generated.MinecraftAccountProto accounts */ 2:
                    message.accounts.push(MinecraftAccountProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.soulfiremc.grpc.generated.ProxyProto proxies */ 3:
                    message.proxies.push(ProxyProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttackStartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.soulfiremc.grpc.generated.SettingsNamespace settings = 1; */
        for (let i = 0; i < message.settings.length; i++)
            SettingsNamespace.internalBinaryWrite(message.settings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.soulfiremc.grpc.generated.MinecraftAccountProto accounts = 2; */
        for (let i = 0; i < message.accounts.length; i++)
            MinecraftAccountProto.internalBinaryWrite(message.accounts[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.soulfiremc.grpc.generated.ProxyProto proxies = 3; */
        for (let i = 0; i < message.proxies.length; i++)
            ProxyProto.internalBinaryWrite(message.proxies[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.AttackStartRequest
 */
export const AttackStartRequest = new AttackStartRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttackStartResponse$Type extends MessageType<AttackStartResponse> {
    constructor() {
        super("com.soulfiremc.grpc.generated.AttackStartResponse", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AttackStartResponse>): AttackStartResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<AttackStartResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttackStartResponse): AttackStartResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttackStartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.AttackStartResponse
 */
export const AttackStartResponse = new AttackStartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttackStateToggleRequest$Type extends MessageType<AttackStateToggleRequest> {
    constructor() {
        super("com.soulfiremc.grpc.generated.AttackStateToggleRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "newState", kind: "enum", T: () => ["com.soulfiremc.grpc.generated.AttackStateToggleRequest.State", AttackStateToggleRequest_State] }
        ]);
    }
    create(value?: PartialMessage<AttackStateToggleRequest>): AttackStateToggleRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.newState = 0;
        if (value !== undefined)
            reflectionMergePartial<AttackStateToggleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttackStateToggleRequest): AttackStateToggleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* com.soulfiremc.grpc.generated.AttackStateToggleRequest.State newState */ 2:
                    message.newState = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttackStateToggleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* com.soulfiremc.grpc.generated.AttackStateToggleRequest.State newState = 2; */
        if (message.newState !== 0)
            writer.tag(2, WireType.Varint).int32(message.newState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.AttackStateToggleRequest
 */
export const AttackStateToggleRequest = new AttackStateToggleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttackStateToggleResponse$Type extends MessageType<AttackStateToggleResponse> {
    constructor() {
        super("com.soulfiremc.grpc.generated.AttackStateToggleResponse", []);
    }
    create(value?: PartialMessage<AttackStateToggleResponse>): AttackStateToggleResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AttackStateToggleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttackStateToggleResponse): AttackStateToggleResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AttackStateToggleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.AttackStateToggleResponse
 */
export const AttackStateToggleResponse = new AttackStateToggleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttackStopRequest$Type extends MessageType<AttackStopRequest> {
    constructor() {
        super("com.soulfiremc.grpc.generated.AttackStopRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AttackStopRequest>): AttackStopRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<AttackStopRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttackStopRequest): AttackStopRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttackStopRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.AttackStopRequest
 */
export const AttackStopRequest = new AttackStopRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttackStopResponse$Type extends MessageType<AttackStopResponse> {
    constructor() {
        super("com.soulfiremc.grpc.generated.AttackStopResponse", []);
    }
    create(value?: PartialMessage<AttackStopResponse>): AttackStopResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AttackStopResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttackStopResponse): AttackStopResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AttackStopResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.AttackStopResponse
 */
export const AttackStopResponse = new AttackStopResponse$Type();
/**
 * @generated ServiceType for protobuf service com.soulfiremc.grpc.generated.AttackService
 */
export const AttackService = new ServiceType("com.soulfiremc.grpc.generated.AttackService", [
    { name: "startAttack", options: {}, I: AttackStartRequest, O: AttackStartResponse },
    { name: "toggleAttackState", options: {}, I: AttackStateToggleRequest, O: AttackStateToggleResponse },
    { name: "stopAttack", options: {}, I: AttackStopRequest, O: AttackStopResponse }
]);
