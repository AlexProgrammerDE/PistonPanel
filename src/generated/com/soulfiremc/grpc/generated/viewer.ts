// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "com/soulfiremc/grpc/generated/viewer.proto" (package "com.soulfiremc.grpc.generated", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ViewerListRequest
 */
export interface ViewerListRequest {
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ViewerListResponse
 */
export interface ViewerListResponse {
    /**
     * @generated from protobuf field: repeated string viewers = 1;
     */
    viewers: string[];
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ViewerDataRequest
 */
export interface ViewerDataRequest {
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ViewerDataResponse
 */
export interface ViewerDataResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class ViewerListRequest$Type extends MessageType<ViewerListRequest> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ViewerListRequest", []);
    }
    create(value?: PartialMessage<ViewerListRequest>): ViewerListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ViewerListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewerListRequest): ViewerListRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ViewerListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ViewerListRequest
 */
export const ViewerListRequest = new ViewerListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewerListResponse$Type extends MessageType<ViewerListResponse> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ViewerListResponse", [
            { no: 1, name: "viewers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ViewerListResponse>): ViewerListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.viewers = [];
        if (value !== undefined)
            reflectionMergePartial<ViewerListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewerListResponse): ViewerListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string viewers */ 1:
                    message.viewers.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ViewerListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string viewers = 1; */
        for (let i = 0; i < message.viewers.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.viewers[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ViewerListResponse
 */
export const ViewerListResponse = new ViewerListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewerDataRequest$Type extends MessageType<ViewerDataRequest> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ViewerDataRequest", []);
    }
    create(value?: PartialMessage<ViewerDataRequest>): ViewerDataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ViewerDataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewerDataRequest): ViewerDataRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ViewerDataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ViewerDataRequest
 */
export const ViewerDataRequest = new ViewerDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewerDataResponse$Type extends MessageType<ViewerDataResponse> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ViewerDataResponse", []);
    }
    create(value?: PartialMessage<ViewerDataResponse>): ViewerDataResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ViewerDataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewerDataResponse): ViewerDataResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ViewerDataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ViewerDataResponse
 */
export const ViewerDataResponse = new ViewerDataResponse$Type();
/**
 * @generated ServiceType for protobuf service com.soulfiremc.grpc.generated.ViewerService
 */
export const ViewerService = new ServiceType("com.soulfiremc.grpc.generated.ViewerService", [
    { name: "listAvailable", options: {}, I: ViewerListRequest, O: ViewerListResponse },
    { name: "subscribe", serverStreaming: true, options: {}, I: ViewerDataRequest, O: ViewerDataResponse }
]);
