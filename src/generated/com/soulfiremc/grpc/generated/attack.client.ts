// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "com/soulfiremc/grpc/generated/attack.proto" (package "com.soulfiremc.grpc.generated", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AttackService } from "./attack";
import type { AttackStopResponse } from "./attack";
import type { AttackStopRequest } from "./attack";
import type { AttackStateToggleResponse } from "./attack";
import type { AttackStateToggleRequest } from "./attack";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AttackStartResponse } from "./attack";
import type { AttackStartRequest } from "./attack";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service com.soulfiremc.grpc.generated.AttackService
 */
export interface IAttackServiceClient {
    /**
     * @generated from protobuf rpc: startAttack(com.soulfiremc.grpc.generated.AttackStartRequest) returns (com.soulfiremc.grpc.generated.AttackStartResponse);
     */
    startAttack(input: AttackStartRequest, options?: RpcOptions): UnaryCall<AttackStartRequest, AttackStartResponse>;
    /**
     * @generated from protobuf rpc: toggleAttackState(com.soulfiremc.grpc.generated.AttackStateToggleRequest) returns (com.soulfiremc.grpc.generated.AttackStateToggleResponse);
     */
    toggleAttackState(input: AttackStateToggleRequest, options?: RpcOptions): UnaryCall<AttackStateToggleRequest, AttackStateToggleResponse>;
    /**
     * @generated from protobuf rpc: stopAttack(com.soulfiremc.grpc.generated.AttackStopRequest) returns (com.soulfiremc.grpc.generated.AttackStopResponse);
     */
    stopAttack(input: AttackStopRequest, options?: RpcOptions): UnaryCall<AttackStopRequest, AttackStopResponse>;
}
/**
 * @generated from protobuf service com.soulfiremc.grpc.generated.AttackService
 */
export class AttackServiceClient implements IAttackServiceClient, ServiceInfo {
    typeName = AttackService.typeName;
    methods = AttackService.methods;
    options = AttackService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: startAttack(com.soulfiremc.grpc.generated.AttackStartRequest) returns (com.soulfiremc.grpc.generated.AttackStartResponse);
     */
    startAttack(input: AttackStartRequest, options?: RpcOptions): UnaryCall<AttackStartRequest, AttackStartResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttackStartRequest, AttackStartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: toggleAttackState(com.soulfiremc.grpc.generated.AttackStateToggleRequest) returns (com.soulfiremc.grpc.generated.AttackStateToggleResponse);
     */
    toggleAttackState(input: AttackStateToggleRequest, options?: RpcOptions): UnaryCall<AttackStateToggleRequest, AttackStateToggleResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttackStateToggleRequest, AttackStateToggleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: stopAttack(com.soulfiremc.grpc.generated.AttackStopRequest) returns (com.soulfiremc.grpc.generated.AttackStopResponse);
     */
    stopAttack(input: AttackStopRequest, options?: RpcOptions): UnaryCall<AttackStopRequest, AttackStopResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttackStopRequest, AttackStopResponse>("unary", this._transport, method, opt, input);
    }
}
