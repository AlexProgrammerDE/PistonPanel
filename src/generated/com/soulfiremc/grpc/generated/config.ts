// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "com/soulfiremc/grpc/generated/config.proto" (package "com.soulfiremc.grpc.generated", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ClientDataRequest
 */
export interface ClientDataRequest {
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.StringSetting
 */
export interface StringSetting {
    /**
     * @generated from protobuf field: string def = 1;
     */
    def: string;
    /**
     * @generated from protobuf field: bool secret = 2;
     */
    secret: boolean;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.IntSetting
 */
export interface IntSetting {
    /**
     * @generated from protobuf field: int32 def = 1;
     */
    def: number;
    /**
     * @generated from protobuf field: int32 min = 2;
     */
    min: number;
    /**
     * @generated from protobuf field: int32 max = 3;
     */
    max: number;
    /**
     * @generated from protobuf field: int32 step = 4;
     */
    step: number;
    /**
     * @generated from protobuf field: optional string format = 5;
     */
    format?: string;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.DoubleSetting
 */
export interface DoubleSetting {
    /**
     * @generated from protobuf field: double def = 1;
     */
    def: number;
    /**
     * @generated from protobuf field: double min = 2;
     */
    min: number;
    /**
     * @generated from protobuf field: double max = 3;
     */
    max: number;
    /**
     * @generated from protobuf field: double step = 4;
     */
    step: number;
    /**
     * @generated from protobuf field: optional string format = 5;
     */
    format?: string;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.BoolSetting
 */
export interface BoolSetting {
    /**
     * @generated from protobuf field: bool def = 1;
     */
    def: boolean;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ComboOption
 */
export interface ComboOption {
    /**
     * Sent to server
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Displayed to user
     *
     * @generated from protobuf field: string displayName = 2;
     */
    displayName: string;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ComboSetting
 */
export interface ComboSetting {
    /**
     * List of options
     *
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.ComboOption options = 1;
     */
    options: ComboOption[];
    /**
     * @generated from protobuf field: int32 def = 2;
     */
    def: number;
}
/**
 * A single setting type with optional default value
 *
 * @generated from protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingType
 */
export interface ClientPluginSettingType {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "string";
        /**
         * @generated from protobuf field: com.soulfiremc.grpc.generated.StringSetting string = 1;
         */
        string: StringSetting;
    } | {
        oneofKind: "int";
        /**
         * @generated from protobuf field: com.soulfiremc.grpc.generated.IntSetting int = 2;
         */
        int: IntSetting;
    } | {
        oneofKind: "double";
        /**
         * @generated from protobuf field: com.soulfiremc.grpc.generated.DoubleSetting double = 3;
         */
        double: DoubleSetting;
    } | {
        oneofKind: "bool";
        /**
         * @generated from protobuf field: com.soulfiremc.grpc.generated.BoolSetting bool = 4;
         */
        bool: BoolSetting;
    } | {
        oneofKind: "combo";
        /**
         * @generated from protobuf field: com.soulfiremc.grpc.generated.ComboSetting combo = 5;
         */
        combo: ComboSetting;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A single option in the settings page
 *
 * @generated from protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingEntrySingle
 */
export interface ClientPluginSettingEntrySingle {
    /**
     * Basically we only send a kv map to the server with every setting entry
     *
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string uiName = 2;
     */
    uiName: string;
    /**
     * @generated from protobuf field: repeated string cliFlags = 3;
     */
    cliFlags: string[];
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: optional string hint = 5;
     */
    hint?: string;
    /**
     * @generated from protobuf field: com.soulfiremc.grpc.generated.ClientPluginSettingType type = 6;
     */
    type?: ClientPluginSettingType;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPairSingle
 */
export interface ClientPluginSettingEntryMinMaxPairSingle {
    /**
     * Basically we only send a kv map to the server with every setting entry
     *
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string uiName = 2;
     */
    uiName: string;
    /**
     * @generated from protobuf field: repeated string cliFlags = 3;
     */
    cliFlags: string[];
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: optional string hint = 5;
     */
    hint?: string;
    /**
     * @generated from protobuf field: com.soulfiremc.grpc.generated.IntSetting intSetting = 6;
     */
    intSetting?: IntSetting;
}
/**
 * A paired option in the settings page
 *
 * @generated from protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPair
 */
export interface ClientPluginSettingEntryMinMaxPair {
    /**
     * Required to be IntSetting
     *
     * @generated from protobuf field: com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPairSingle min = 1;
     */
    min?: ClientPluginSettingEntryMinMaxPairSingle;
    /**
     * Required to be IntSetting
     *
     * @generated from protobuf field: com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPairSingle max = 2;
     */
    max?: ClientPluginSettingEntryMinMaxPairSingle;
}
/**
 * A entry in the settings page
 *
 * @generated from protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingEntry
 */
export interface ClientPluginSettingEntry {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "single";
        /**
         * @generated from protobuf field: com.soulfiremc.grpc.generated.ClientPluginSettingEntrySingle single = 1;
         */
        single: ClientPluginSettingEntrySingle;
    } | {
        oneofKind: "minMaxPair";
        /**
         * @generated from protobuf field: com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPair minMaxPair = 2;
         */
        minMaxPair: ClientPluginSettingEntryMinMaxPair;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingsPage
 */
export interface ClientPluginSettingsPage {
    /**
     * @generated from protobuf field: bool hidden = 1;
     */
    hidden: boolean;
    /**
     * The name of the page for these settings
     *
     * @generated from protobuf field: string pageName = 2;
     */
    pageName: string;
    /**
     * What namespace the settings of this page represent
     *
     * @generated from protobuf field: string namespace = 3;
     */
    namespace: string;
    /**
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.ClientPluginSettingEntry entries = 4;
     */
    entries: ClientPluginSettingEntry[];
}
/**
 * New options that extend the clients options
 *
 * @generated from protobuf message com.soulfiremc.grpc.generated.ClientPlugin
 */
export interface ClientPlugin {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string provider = 4;
     */
    provider: string;
}
/**
 * @generated from protobuf message com.soulfiremc.grpc.generated.UIClientDataResponse
 */
export interface UIClientDataResponse {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.ClientPlugin plugins = 2;
     */
    plugins: ClientPlugin[];
    /**
     * @generated from protobuf field: repeated com.soulfiremc.grpc.generated.ClientPluginSettingsPage pluginSettings = 3;
     */
    pluginSettings: ClientPluginSettingsPage[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientDataRequest$Type extends MessageType<ClientDataRequest> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ClientDataRequest", []);
    }
    create(value?: PartialMessage<ClientDataRequest>): ClientDataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClientDataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientDataRequest): ClientDataRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ClientDataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ClientDataRequest
 */
export const ClientDataRequest = new ClientDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringSetting$Type extends MessageType<StringSetting> {
    constructor() {
        super("com.soulfiremc.grpc.generated.StringSetting", [
            { no: 1, name: "def", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "secret", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StringSetting>): StringSetting {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.def = "";
        message.secret = false;
        if (value !== undefined)
            reflectionMergePartial<StringSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringSetting): StringSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string def */ 1:
                    message.def = reader.string();
                    break;
                case /* bool secret */ 2:
                    message.secret = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string def = 1; */
        if (message.def !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.def);
        /* bool secret = 2; */
        if (message.secret !== false)
            writer.tag(2, WireType.Varint).bool(message.secret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.StringSetting
 */
export const StringSetting = new StringSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntSetting$Type extends MessageType<IntSetting> {
    constructor() {
        super("com.soulfiremc.grpc.generated.IntSetting", [
            { no: 1, name: "def", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "min", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "max", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "step", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "format", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntSetting>): IntSetting {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.def = 0;
        message.min = 0;
        message.max = 0;
        message.step = 0;
        if (value !== undefined)
            reflectionMergePartial<IntSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntSetting): IntSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 def */ 1:
                    message.def = reader.int32();
                    break;
                case /* int32 min */ 2:
                    message.min = reader.int32();
                    break;
                case /* int32 max */ 3:
                    message.max = reader.int32();
                    break;
                case /* int32 step */ 4:
                    message.step = reader.int32();
                    break;
                case /* optional string format */ 5:
                    message.format = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 def = 1; */
        if (message.def !== 0)
            writer.tag(1, WireType.Varint).int32(message.def);
        /* int32 min = 2; */
        if (message.min !== 0)
            writer.tag(2, WireType.Varint).int32(message.min);
        /* int32 max = 3; */
        if (message.max !== 0)
            writer.tag(3, WireType.Varint).int32(message.max);
        /* int32 step = 4; */
        if (message.step !== 0)
            writer.tag(4, WireType.Varint).int32(message.step);
        /* optional string format = 5; */
        if (message.format !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.format);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.IntSetting
 */
export const IntSetting = new IntSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleSetting$Type extends MessageType<DoubleSetting> {
    constructor() {
        super("com.soulfiremc.grpc.generated.DoubleSetting", [
            { no: 1, name: "def", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "min", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "max", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "step", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "format", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DoubleSetting>): DoubleSetting {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.def = 0;
        message.min = 0;
        message.max = 0;
        message.step = 0;
        if (value !== undefined)
            reflectionMergePartial<DoubleSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleSetting): DoubleSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double def */ 1:
                    message.def = reader.double();
                    break;
                case /* double min */ 2:
                    message.min = reader.double();
                    break;
                case /* double max */ 3:
                    message.max = reader.double();
                    break;
                case /* double step */ 4:
                    message.step = reader.double();
                    break;
                case /* optional string format */ 5:
                    message.format = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double def = 1; */
        if (message.def !== 0)
            writer.tag(1, WireType.Bit64).double(message.def);
        /* double min = 2; */
        if (message.min !== 0)
            writer.tag(2, WireType.Bit64).double(message.min);
        /* double max = 3; */
        if (message.max !== 0)
            writer.tag(3, WireType.Bit64).double(message.max);
        /* double step = 4; */
        if (message.step !== 0)
            writer.tag(4, WireType.Bit64).double(message.step);
        /* optional string format = 5; */
        if (message.format !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.format);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.DoubleSetting
 */
export const DoubleSetting = new DoubleSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoolSetting$Type extends MessageType<BoolSetting> {
    constructor() {
        super("com.soulfiremc.grpc.generated.BoolSetting", [
            { no: 1, name: "def", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BoolSetting>): BoolSetting {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.def = false;
        if (value !== undefined)
            reflectionMergePartial<BoolSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BoolSetting): BoolSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool def */ 1:
                    message.def = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BoolSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool def = 1; */
        if (message.def !== false)
            writer.tag(1, WireType.Varint).bool(message.def);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.BoolSetting
 */
export const BoolSetting = new BoolSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ComboOption$Type extends MessageType<ComboOption> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ComboOption", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "displayName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ComboOption>): ComboOption {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.displayName = "";
        if (value !== undefined)
            reflectionMergePartial<ComboOption>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComboOption): ComboOption {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string displayName */ 2:
                    message.displayName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ComboOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string displayName = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ComboOption
 */
export const ComboOption = new ComboOption$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ComboSetting$Type extends MessageType<ComboSetting> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ComboSetting", [
            { no: 1, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ComboOption },
            { no: 2, name: "def", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ComboSetting>): ComboSetting {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.options = [];
        message.def = 0;
        if (value !== undefined)
            reflectionMergePartial<ComboSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComboSetting): ComboSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.soulfiremc.grpc.generated.ComboOption options */ 1:
                    message.options.push(ComboOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 def */ 2:
                    message.def = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ComboSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.soulfiremc.grpc.generated.ComboOption options = 1; */
        for (let i = 0; i < message.options.length; i++)
            ComboOption.internalBinaryWrite(message.options[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 def = 2; */
        if (message.def !== 0)
            writer.tag(2, WireType.Varint).int32(message.def);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ComboSetting
 */
export const ComboSetting = new ComboSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientPluginSettingType$Type extends MessageType<ClientPluginSettingType> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ClientPluginSettingType", [
            { no: 1, name: "string", kind: "message", oneof: "value", T: () => StringSetting },
            { no: 2, name: "int", kind: "message", oneof: "value", T: () => IntSetting },
            { no: 3, name: "double", kind: "message", oneof: "value", T: () => DoubleSetting },
            { no: 4, name: "bool", kind: "message", oneof: "value", T: () => BoolSetting },
            { no: 5, name: "combo", kind: "message", oneof: "value", T: () => ComboSetting }
        ]);
    }
    create(value?: PartialMessage<ClientPluginSettingType>): ClientPluginSettingType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ClientPluginSettingType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientPluginSettingType): ClientPluginSettingType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.soulfiremc.grpc.generated.StringSetting string */ 1:
                    message.value = {
                        oneofKind: "string",
                        string: StringSetting.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).string)
                    };
                    break;
                case /* com.soulfiremc.grpc.generated.IntSetting int */ 2:
                    message.value = {
                        oneofKind: "int",
                        int: IntSetting.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).int)
                    };
                    break;
                case /* com.soulfiremc.grpc.generated.DoubleSetting double */ 3:
                    message.value = {
                        oneofKind: "double",
                        double: DoubleSetting.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).double)
                    };
                    break;
                case /* com.soulfiremc.grpc.generated.BoolSetting bool */ 4:
                    message.value = {
                        oneofKind: "bool",
                        bool: BoolSetting.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).bool)
                    };
                    break;
                case /* com.soulfiremc.grpc.generated.ComboSetting combo */ 5:
                    message.value = {
                        oneofKind: "combo",
                        combo: ComboSetting.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).combo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientPluginSettingType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.soulfiremc.grpc.generated.StringSetting string = 1; */
        if (message.value.oneofKind === "string")
            StringSetting.internalBinaryWrite(message.value.string, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.soulfiremc.grpc.generated.IntSetting int = 2; */
        if (message.value.oneofKind === "int")
            IntSetting.internalBinaryWrite(message.value.int, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* com.soulfiremc.grpc.generated.DoubleSetting double = 3; */
        if (message.value.oneofKind === "double")
            DoubleSetting.internalBinaryWrite(message.value.double, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* com.soulfiremc.grpc.generated.BoolSetting bool = 4; */
        if (message.value.oneofKind === "bool")
            BoolSetting.internalBinaryWrite(message.value.bool, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* com.soulfiremc.grpc.generated.ComboSetting combo = 5; */
        if (message.value.oneofKind === "combo")
            ComboSetting.internalBinaryWrite(message.value.combo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingType
 */
export const ClientPluginSettingType = new ClientPluginSettingType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientPluginSettingEntrySingle$Type extends MessageType<ClientPluginSettingEntrySingle> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ClientPluginSettingEntrySingle", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uiName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cliFlags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "hint", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "type", kind: "message", T: () => ClientPluginSettingType }
        ]);
    }
    create(value?: PartialMessage<ClientPluginSettingEntrySingle>): ClientPluginSettingEntrySingle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.uiName = "";
        message.cliFlags = [];
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<ClientPluginSettingEntrySingle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientPluginSettingEntrySingle): ClientPluginSettingEntrySingle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string uiName */ 2:
                    message.uiName = reader.string();
                    break;
                case /* repeated string cliFlags */ 3:
                    message.cliFlags.push(reader.string());
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* optional string hint */ 5:
                    message.hint = reader.string();
                    break;
                case /* com.soulfiremc.grpc.generated.ClientPluginSettingType type */ 6:
                    message.type = ClientPluginSettingType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientPluginSettingEntrySingle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string uiName = 2; */
        if (message.uiName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uiName);
        /* repeated string cliFlags = 3; */
        for (let i = 0; i < message.cliFlags.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.cliFlags[i]);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* optional string hint = 5; */
        if (message.hint !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.hint);
        /* com.soulfiremc.grpc.generated.ClientPluginSettingType type = 6; */
        if (message.type)
            ClientPluginSettingType.internalBinaryWrite(message.type, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingEntrySingle
 */
export const ClientPluginSettingEntrySingle = new ClientPluginSettingEntrySingle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientPluginSettingEntryMinMaxPairSingle$Type extends MessageType<ClientPluginSettingEntryMinMaxPairSingle> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPairSingle", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uiName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cliFlags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "hint", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "intSetting", kind: "message", T: () => IntSetting }
        ]);
    }
    create(value?: PartialMessage<ClientPluginSettingEntryMinMaxPairSingle>): ClientPluginSettingEntryMinMaxPairSingle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.uiName = "";
        message.cliFlags = [];
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<ClientPluginSettingEntryMinMaxPairSingle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientPluginSettingEntryMinMaxPairSingle): ClientPluginSettingEntryMinMaxPairSingle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string uiName */ 2:
                    message.uiName = reader.string();
                    break;
                case /* repeated string cliFlags */ 3:
                    message.cliFlags.push(reader.string());
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* optional string hint */ 5:
                    message.hint = reader.string();
                    break;
                case /* com.soulfiremc.grpc.generated.IntSetting intSetting */ 6:
                    message.intSetting = IntSetting.internalBinaryRead(reader, reader.uint32(), options, message.intSetting);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientPluginSettingEntryMinMaxPairSingle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string uiName = 2; */
        if (message.uiName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uiName);
        /* repeated string cliFlags = 3; */
        for (let i = 0; i < message.cliFlags.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.cliFlags[i]);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* optional string hint = 5; */
        if (message.hint !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.hint);
        /* com.soulfiremc.grpc.generated.IntSetting intSetting = 6; */
        if (message.intSetting)
            IntSetting.internalBinaryWrite(message.intSetting, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPairSingle
 */
export const ClientPluginSettingEntryMinMaxPairSingle = new ClientPluginSettingEntryMinMaxPairSingle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientPluginSettingEntryMinMaxPair$Type extends MessageType<ClientPluginSettingEntryMinMaxPair> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPair", [
            { no: 1, name: "min", kind: "message", T: () => ClientPluginSettingEntryMinMaxPairSingle },
            { no: 2, name: "max", kind: "message", T: () => ClientPluginSettingEntryMinMaxPairSingle }
        ]);
    }
    create(value?: PartialMessage<ClientPluginSettingEntryMinMaxPair>): ClientPluginSettingEntryMinMaxPair {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClientPluginSettingEntryMinMaxPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientPluginSettingEntryMinMaxPair): ClientPluginSettingEntryMinMaxPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPairSingle min */ 1:
                    message.min = ClientPluginSettingEntryMinMaxPairSingle.internalBinaryRead(reader, reader.uint32(), options, message.min);
                    break;
                case /* com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPairSingle max */ 2:
                    message.max = ClientPluginSettingEntryMinMaxPairSingle.internalBinaryRead(reader, reader.uint32(), options, message.max);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientPluginSettingEntryMinMaxPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPairSingle min = 1; */
        if (message.min)
            ClientPluginSettingEntryMinMaxPairSingle.internalBinaryWrite(message.min, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPairSingle max = 2; */
        if (message.max)
            ClientPluginSettingEntryMinMaxPairSingle.internalBinaryWrite(message.max, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPair
 */
export const ClientPluginSettingEntryMinMaxPair = new ClientPluginSettingEntryMinMaxPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientPluginSettingEntry$Type extends MessageType<ClientPluginSettingEntry> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ClientPluginSettingEntry", [
            { no: 1, name: "single", kind: "message", oneof: "value", T: () => ClientPluginSettingEntrySingle },
            { no: 2, name: "minMaxPair", kind: "message", oneof: "value", T: () => ClientPluginSettingEntryMinMaxPair }
        ]);
    }
    create(value?: PartialMessage<ClientPluginSettingEntry>): ClientPluginSettingEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ClientPluginSettingEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientPluginSettingEntry): ClientPluginSettingEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.soulfiremc.grpc.generated.ClientPluginSettingEntrySingle single */ 1:
                    message.value = {
                        oneofKind: "single",
                        single: ClientPluginSettingEntrySingle.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).single)
                    };
                    break;
                case /* com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPair minMaxPair */ 2:
                    message.value = {
                        oneofKind: "minMaxPair",
                        minMaxPair: ClientPluginSettingEntryMinMaxPair.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).minMaxPair)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientPluginSettingEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.soulfiremc.grpc.generated.ClientPluginSettingEntrySingle single = 1; */
        if (message.value.oneofKind === "single")
            ClientPluginSettingEntrySingle.internalBinaryWrite(message.value.single, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.soulfiremc.grpc.generated.ClientPluginSettingEntryMinMaxPair minMaxPair = 2; */
        if (message.value.oneofKind === "minMaxPair")
            ClientPluginSettingEntryMinMaxPair.internalBinaryWrite(message.value.minMaxPair, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingEntry
 */
export const ClientPluginSettingEntry = new ClientPluginSettingEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientPluginSettingsPage$Type extends MessageType<ClientPluginSettingsPage> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ClientPluginSettingsPage", [
            { no: 1, name: "hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "pageName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClientPluginSettingEntry }
        ]);
    }
    create(value?: PartialMessage<ClientPluginSettingsPage>): ClientPluginSettingsPage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hidden = false;
        message.pageName = "";
        message.namespace = "";
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial<ClientPluginSettingsPage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientPluginSettingsPage): ClientPluginSettingsPage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool hidden */ 1:
                    message.hidden = reader.bool();
                    break;
                case /* string pageName */ 2:
                    message.pageName = reader.string();
                    break;
                case /* string namespace */ 3:
                    message.namespace = reader.string();
                    break;
                case /* repeated com.soulfiremc.grpc.generated.ClientPluginSettingEntry entries */ 4:
                    message.entries.push(ClientPluginSettingEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientPluginSettingsPage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool hidden = 1; */
        if (message.hidden !== false)
            writer.tag(1, WireType.Varint).bool(message.hidden);
        /* string pageName = 2; */
        if (message.pageName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pageName);
        /* string namespace = 3; */
        if (message.namespace !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.namespace);
        /* repeated com.soulfiremc.grpc.generated.ClientPluginSettingEntry entries = 4; */
        for (let i = 0; i < message.entries.length; i++)
            ClientPluginSettingEntry.internalBinaryWrite(message.entries[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ClientPluginSettingsPage
 */
export const ClientPluginSettingsPage = new ClientPluginSettingsPage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientPlugin$Type extends MessageType<ClientPlugin> {
    constructor() {
        super("com.soulfiremc.grpc.generated.ClientPlugin", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientPlugin>): ClientPlugin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.version = "";
        message.description = "";
        message.provider = "";
        if (value !== undefined)
            reflectionMergePartial<ClientPlugin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientPlugin): ClientPlugin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string provider */ 4:
                    message.provider = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientPlugin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string provider = 4; */
        if (message.provider !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.provider);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.ClientPlugin
 */
export const ClientPlugin = new ClientPlugin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIClientDataResponse$Type extends MessageType<UIClientDataResponse> {
    constructor() {
        super("com.soulfiremc.grpc.generated.UIClientDataResponse", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "plugins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClientPlugin },
            { no: 3, name: "pluginSettings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClientPluginSettingsPage }
        ]);
    }
    create(value?: PartialMessage<UIClientDataResponse>): UIClientDataResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.plugins = [];
        message.pluginSettings = [];
        if (value !== undefined)
            reflectionMergePartial<UIClientDataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIClientDataResponse): UIClientDataResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* repeated com.soulfiremc.grpc.generated.ClientPlugin plugins */ 2:
                    message.plugins.push(ClientPlugin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.soulfiremc.grpc.generated.ClientPluginSettingsPage pluginSettings */ 3:
                    message.pluginSettings.push(ClientPluginSettingsPage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIClientDataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* repeated com.soulfiremc.grpc.generated.ClientPlugin plugins = 2; */
        for (let i = 0; i < message.plugins.length; i++)
            ClientPlugin.internalBinaryWrite(message.plugins[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.soulfiremc.grpc.generated.ClientPluginSettingsPage pluginSettings = 3; */
        for (let i = 0; i < message.pluginSettings.length; i++)
            ClientPluginSettingsPage.internalBinaryWrite(message.pluginSettings[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.soulfiremc.grpc.generated.UIClientDataResponse
 */
export const UIClientDataResponse = new UIClientDataResponse$Type();
/**
 * @generated ServiceType for protobuf service com.soulfiremc.grpc.generated.ConfigService
 */
export const ConfigService = new ServiceType("com.soulfiremc.grpc.generated.ConfigService", [
    { name: "getUIClientData", options: {}, I: ClientDataRequest, O: UIClientDataResponse }
]);
