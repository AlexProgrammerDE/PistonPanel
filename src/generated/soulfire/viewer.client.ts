// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "soulfire/viewer.proto" (package "soulfire.v1", syntax proto3)
// tslint:disable
import type { RpcOptions, RpcTransport, ServerStreamingCall, ServiceInfo, UnaryCall } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { ViewerDataRequest, ViewerDataResponse, ViewerListRequest, ViewerListResponse } from './viewer';
import { ViewerService } from './viewer';

/**
 * @generated from protobuf service soulfire.v1.ViewerService
 */
export interface IViewerServiceClient {
    /**
     * @generated from protobuf rpc: listAvailable(soulfire.v1.ViewerListRequest) returns (soulfire.v1.ViewerListResponse);
     */
    listAvailable(input: ViewerListRequest, options?: RpcOptions): UnaryCall<ViewerListRequest, ViewerListResponse>;
    /**
     * @generated from protobuf rpc: subscribe(soulfire.v1.ViewerDataRequest) returns (stream soulfire.v1.ViewerDataResponse);
     */
    subscribe(input: ViewerDataRequest, options?: RpcOptions): ServerStreamingCall<ViewerDataRequest, ViewerDataResponse>;
}
/**
 * @generated from protobuf service soulfire.v1.ViewerService
 */
export class ViewerServiceClient implements IViewerServiceClient, ServiceInfo {
    typeName = ViewerService.typeName;
    methods = ViewerService.methods;
    options = ViewerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: listAvailable(soulfire.v1.ViewerListRequest) returns (soulfire.v1.ViewerListResponse);
     */
    listAvailable(input: ViewerListRequest, options?: RpcOptions): UnaryCall<ViewerListRequest, ViewerListResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ViewerListRequest, ViewerListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: subscribe(soulfire.v1.ViewerDataRequest) returns (stream soulfire.v1.ViewerDataResponse);
     */
    subscribe(input: ViewerDataRequest, options?: RpcOptions): ServerStreamingCall<ViewerDataRequest, ViewerDataResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ViewerDataRequest, ViewerDataResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
