// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "soulfire/instance.proto" (package "soulfire.v1", syntax proto3)
// tslint:disable
import type { RpcOptions, RpcTransport, ServiceInfo, UnaryCall } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type {
  InstanceCreateRequest,
  InstanceCreateResponse,
  InstanceDeleteRequest,
  InstanceDeleteResponse,
  InstanceInfoRequest,
  InstanceInfoResponse,
  InstanceListRequest,
  InstanceListResponse,
  InstanceStateChangeRequest,
  InstanceStateChangeResponse,
  InstanceUpdateConfigRequest,
  InstanceUpdateConfigResponse,
  InstanceUpdateFriendlyNameRequest,
  InstanceUpdateFriendlyNameResponse,
} from './instance';
import { InstanceService } from './instance';

/**
 * @generated from protobuf service soulfire.v1.InstanceService
 */
export interface IInstanceServiceClient {
    /**
     * @generated from protobuf rpc: createInstance(soulfire.v1.InstanceCreateRequest) returns (soulfire.v1.InstanceCreateResponse);
     */
    createInstance(input: InstanceCreateRequest, options?: RpcOptions): UnaryCall<InstanceCreateRequest, InstanceCreateResponse>;
    /**
     * @generated from protobuf rpc: deleteInstance(soulfire.v1.InstanceDeleteRequest) returns (soulfire.v1.InstanceDeleteResponse);
     */
    deleteInstance(input: InstanceDeleteRequest, options?: RpcOptions): UnaryCall<InstanceDeleteRequest, InstanceDeleteResponse>;
    /**
     * @generated from protobuf rpc: listInstances(soulfire.v1.InstanceListRequest) returns (soulfire.v1.InstanceListResponse);
     */
    listInstances(input: InstanceListRequest, options?: RpcOptions): UnaryCall<InstanceListRequest, InstanceListResponse>;
    /**
     * @generated from protobuf rpc: getInstanceInfo(soulfire.v1.InstanceInfoRequest) returns (soulfire.v1.InstanceInfoResponse);
     */
    getInstanceInfo(input: InstanceInfoRequest, options?: RpcOptions): UnaryCall<InstanceInfoRequest, InstanceInfoResponse>;
    /**
     * @generated from protobuf rpc: updateInstanceFriendlyName(soulfire.v1.InstanceUpdateFriendlyNameRequest) returns (soulfire.v1.InstanceUpdateFriendlyNameResponse);
     */
    updateInstanceFriendlyName(input: InstanceUpdateFriendlyNameRequest, options?: RpcOptions): UnaryCall<InstanceUpdateFriendlyNameRequest, InstanceUpdateFriendlyNameResponse>;
    /**
     * @generated from protobuf rpc: updateInstanceConfig(soulfire.v1.InstanceUpdateConfigRequest) returns (soulfire.v1.InstanceUpdateConfigResponse);
     */
    updateInstanceConfig(input: InstanceUpdateConfigRequest, options?: RpcOptions): UnaryCall<InstanceUpdateConfigRequest, InstanceUpdateConfigResponse>;
    /**
     * @generated from protobuf rpc: changeInstanceState(soulfire.v1.InstanceStateChangeRequest) returns (soulfire.v1.InstanceStateChangeResponse);
     */
    changeInstanceState(input: InstanceStateChangeRequest, options?: RpcOptions): UnaryCall<InstanceStateChangeRequest, InstanceStateChangeResponse>;
}
/**
 * @generated from protobuf service soulfire.v1.InstanceService
 */
export class InstanceServiceClient implements IInstanceServiceClient, ServiceInfo {
    typeName = InstanceService.typeName;
    methods = InstanceService.methods;
    options = InstanceService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: createInstance(soulfire.v1.InstanceCreateRequest) returns (soulfire.v1.InstanceCreateResponse);
     */
    createInstance(input: InstanceCreateRequest, options?: RpcOptions): UnaryCall<InstanceCreateRequest, InstanceCreateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstanceCreateRequest, InstanceCreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: deleteInstance(soulfire.v1.InstanceDeleteRequest) returns (soulfire.v1.InstanceDeleteResponse);
     */
    deleteInstance(input: InstanceDeleteRequest, options?: RpcOptions): UnaryCall<InstanceDeleteRequest, InstanceDeleteResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstanceDeleteRequest, InstanceDeleteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: listInstances(soulfire.v1.InstanceListRequest) returns (soulfire.v1.InstanceListResponse);
     */
    listInstances(input: InstanceListRequest, options?: RpcOptions): UnaryCall<InstanceListRequest, InstanceListResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstanceListRequest, InstanceListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: getInstanceInfo(soulfire.v1.InstanceInfoRequest) returns (soulfire.v1.InstanceInfoResponse);
     */
    getInstanceInfo(input: InstanceInfoRequest, options?: RpcOptions): UnaryCall<InstanceInfoRequest, InstanceInfoResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstanceInfoRequest, InstanceInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: updateInstanceFriendlyName(soulfire.v1.InstanceUpdateFriendlyNameRequest) returns (soulfire.v1.InstanceUpdateFriendlyNameResponse);
     */
    updateInstanceFriendlyName(input: InstanceUpdateFriendlyNameRequest, options?: RpcOptions): UnaryCall<InstanceUpdateFriendlyNameRequest, InstanceUpdateFriendlyNameResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstanceUpdateFriendlyNameRequest, InstanceUpdateFriendlyNameResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: updateInstanceConfig(soulfire.v1.InstanceUpdateConfigRequest) returns (soulfire.v1.InstanceUpdateConfigResponse);
     */
    updateInstanceConfig(input: InstanceUpdateConfigRequest, options?: RpcOptions): UnaryCall<InstanceUpdateConfigRequest, InstanceUpdateConfigResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstanceUpdateConfigRequest, InstanceUpdateConfigResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: changeInstanceState(soulfire.v1.InstanceStateChangeRequest) returns (soulfire.v1.InstanceStateChangeResponse);
     */
    changeInstanceState(input: InstanceStateChangeRequest, options?: RpcOptions): UnaryCall<InstanceStateChangeRequest, InstanceStateChangeResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstanceStateChangeRequest, InstanceStateChangeResponse>("unary", this._transport, method, opt, input);
    }
}
