// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "soulfire/mc-auth.proto" (package "soulfire.v1", syntax proto3)
// tslint:disable
import type { RpcOptions, RpcTransport, ServerStreamingCall, ServiceInfo, UnaryCall } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type {
  CredentialsAuthRequest,
  CredentialsAuthResponse,
  DeviceCodeAuthRequest,
  DeviceCodeAuthResponse,
  RefreshRequest,
  RefreshResponse,
} from './mc-auth';
import { MCAuthService } from './mc-auth';

/**
 * @generated from protobuf service soulfire.v1.MCAuthService
 */
export interface IMCAuthServiceClient {
    /**
     * @generated from protobuf rpc: loginCredentials(soulfire.v1.CredentialsAuthRequest) returns (soulfire.v1.CredentialsAuthResponse);
     */
    loginCredentials(input: CredentialsAuthRequest, options?: RpcOptions): UnaryCall<CredentialsAuthRequest, CredentialsAuthResponse>;
    /**
     * @generated from protobuf rpc: loginDeviceCode(soulfire.v1.DeviceCodeAuthRequest) returns (stream soulfire.v1.DeviceCodeAuthResponse);
     */
    loginDeviceCode(input: DeviceCodeAuthRequest, options?: RpcOptions): ServerStreamingCall<DeviceCodeAuthRequest, DeviceCodeAuthResponse>;
    /**
     * @generated from protobuf rpc: refresh(soulfire.v1.RefreshRequest) returns (soulfire.v1.RefreshResponse);
     */
    refresh(input: RefreshRequest, options?: RpcOptions): UnaryCall<RefreshRequest, RefreshResponse>;
}
/**
 * @generated from protobuf service soulfire.v1.MCAuthService
 */
export class MCAuthServiceClient implements IMCAuthServiceClient, ServiceInfo {
    typeName = MCAuthService.typeName;
    methods = MCAuthService.methods;
    options = MCAuthService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: loginCredentials(soulfire.v1.CredentialsAuthRequest) returns (soulfire.v1.CredentialsAuthResponse);
     */
    loginCredentials(input: CredentialsAuthRequest, options?: RpcOptions): UnaryCall<CredentialsAuthRequest, CredentialsAuthResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CredentialsAuthRequest, CredentialsAuthResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: loginDeviceCode(soulfire.v1.DeviceCodeAuthRequest) returns (stream soulfire.v1.DeviceCodeAuthResponse);
     */
    loginDeviceCode(input: DeviceCodeAuthRequest, options?: RpcOptions): ServerStreamingCall<DeviceCodeAuthRequest, DeviceCodeAuthResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeviceCodeAuthRequest, DeviceCodeAuthResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: refresh(soulfire.v1.RefreshRequest) returns (soulfire.v1.RefreshResponse);
     */
    refresh(input: RefreshRequest, options?: RpcOptions): UnaryCall<RefreshRequest, RefreshResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RefreshRequest, RefreshResponse>("unary", this._transport, method, opt, input);
    }
}
