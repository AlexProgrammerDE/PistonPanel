// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "soulfire/config.proto" (package "soulfire.v1", syntax proto3)
// tslint:disable
import type { RpcOptions, RpcTransport, ServiceInfo, UnaryCall } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { ClientDataRequest, ClientDataResponse } from './config';
import { ConfigService } from './config';

/**
 * @generated from protobuf service soulfire.v1.ConfigService
 */
export interface IConfigServiceClient {
    /**
     * @generated from protobuf rpc: getClientData(soulfire.v1.ClientDataRequest) returns (soulfire.v1.ClientDataResponse);
     */
    getClientData(input: ClientDataRequest, options?: RpcOptions): UnaryCall<ClientDataRequest, ClientDataResponse>;
}
/**
 * @generated from protobuf service soulfire.v1.ConfigService
 */
export class ConfigServiceClient implements IConfigServiceClient, ServiceInfo {
    typeName = ConfigService.typeName;
    methods = ConfigService.methods;
    options = ConfigService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: getClientData(soulfire.v1.ClientDataRequest) returns (soulfire.v1.ClientDataResponse);
     */
    getClientData(input: ClientDataRequest, options?: RpcOptions): UnaryCall<ClientDataRequest, ClientDataResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ClientDataRequest, ClientDataResponse>("unary", this._transport, method, opt, input);
    }
}
