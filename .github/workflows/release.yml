name: 'publish'

on:
  push:
    branches:
      - release

jobs:
  create-release:
    name: Create Release

    permissions:
      contents: write

    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: 'Setup Node'
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: 'Get Version'
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: 'Create Release'
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${process.env.PACKAGE_VERSION}`,
              name: `SoulFireClient ${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    name: Publish ${{ matrix.name }}
    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-14'
            args: '--target aarch64-apple-darwin'
            name: 'macOS 14 (AMD64)'
            rust-targets: 'aarch64-apple-darwin'
          - platform: 'macos-13'
            args: '--target x86_64-apple-darwin'
            name: 'macOS 13 (AMD64)'
            rust-targets: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'Ubuntu 22.04'
            rust-targets: ''
          - platform: 'windows-2025'
            args: ''
            name: 'Windows Server 2025'
            rust-targets: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: 'Shared: Checkout Repository'
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: 'Shared: Set up nasm'
        uses: ilammy/setup-nasm@v1

      - name: 'Shared: Setup node'
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: 'Shared: Install pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 'Shared: Install Rust toolchain'
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.rust-targets }}

      - name: 'Desktop: Cache dependencies'
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.name }}
          workspaces: src-tauri
          cache-on-failure: true
          cache-all-crates: true

      - name: 'Ubuntu: Install dependencies'
        if: matrix.name == 'Ubuntu 22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: 'Shared: Install frontend dependencies'
        run: pnpm install

      - name: 'Desktop: Build tauri project'
        uses: tauri-apps/tauri-action@v0
        env:
          SIGNPATH_POLICY_SLUG: release-signing
          SIGNPATH_API_KEY: ${{ secrets.SIGNPATH_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          includeDebug: false
          includeRelease: true
          args: ${{ matrix.args }}

      - name: 'Desktop: Upload artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-artifact-${{ matrix.artifact-name }}
          path: |
            ./src-tauri/target${{ matrix.targetPath }}/release/bundle/dmg/*.dmg
            ./src-tauri/target${{ matrix.targetPath }}/release/bundle/nsis/*.exe
            ./src-tauri/target${{ matrix.targetPath }}/release/bundle/appimage/*.AppImage
            ./src-tauri/target${{ matrix.targetPath }}/release/bundle/deb/*.deb
            ./src-tauri/target${{ matrix.targetPath }}/release/bundle/rpm/*.rpm
            ./src-tauri/target${{ matrix.targetPath }}/release/bundle/macos/*.app
          if-no-files-found: error
